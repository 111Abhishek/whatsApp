import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.blueGray50,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(14.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: colorScheme.onPrimary.withOpacity(0.29),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.blueGray400,
          fontSize: 14.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black900.withOpacity(0.25),
          fontSize: 11.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.black900,
          fontSize: 34.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.gray40001,
          fontSize: 26.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w300,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 12.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 10.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.lightBlueA700,
          fontSize: 20.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFFFFFF),
    primaryContainer: Color(0XA5545458),

    // Error colors
    errorContainer: Color(0XFFD1D1D6),

    // On colors(text colors)
    onPrimary: Color(0XFF3C3C43),
    onPrimaryContainer: Color(0X66FFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber600 => Color(0XFFFBB500);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue400 => Color(0XFF4BA0FE);
  Color get blue500 => Color(0XFF3497F9);
  Color get blue50001 => Color(0XFF3396FD);
  Color get blueA400 => Color(0XFF397AFE);

  // BlueGray
  Color get blueGray400 => Color(0XFF8E8E93);
  Color get blueGray50 => Color(0XFFEFEFF4);
  Color get blueGray5001 => Color(0XFFEEEEF4);

  // Gray
  Color get gray100 => Color(0XFFF6F6F6);
  Color get gray200 => Color(0XFFECECED);
  Color get gray300 => Color(0XFFDDDDE9);
  Color get gray400 => Color(0XFFC6C6C8);
  Color get gray40001 => Color(0XFFC7C7CC);
  Color get gray40002 => Color(0XFFC6C6CC);
  Color get gray50 => Color(0XFFFAFAFA);
  Color get gray500 => Color(0XFFA6A6AA);
  Color get gray50001 => Color(0XFF9F9EA2);
  Color get gray50002 => Color(0XFF979797);
  Color get gray60028 => Color(0X28787880);
  Color get gray700 => Color(0XFF636366);

  // Graye
  Color get gray6001e => Color(0X1E767680);

  // Green
  Color get green400 => Color(0XFF4BD763);
  Color get green40001 => Color(0XFF60BB58);
  Color get green500 => Color(0XFF34C759);
  Color get greenA700 => Color(0XFF1FC434);

  // Indigo
  Color get indigo50 => Color(0XFFEDEDFF);
  Color get indigo500 => Color(0XFF3E70A7);

  // LightBlue
  Color get lightBlueA700 => Color(0XFF007AFF);

  // LightGreen
  Color get lightGreen100 => Color(0XFFDCF7C5);

  // Orange
  Color get orange400 => Color(0XFFFE8D35);

  // Purple
  Color get purpleA100 => Color(0XFFEC72D7);

  // Red
  Color get red500 => Color(0XFFFF3B2F);
  Color get red50001 => Color(0XFFFF3B30);
  Color get redA100 => Color(0XFFFF8A8C);
  Color get redA400 => Color(0XFFFF2C55);

  // Teal
  Color get tealA700 => Color(0XFF07AD9F);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
